package main.java.ownClasses.presentation;

import main.java.sharedClasses.domain.domainControllers.DomainPersistanceController;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;

/**
 * Created by iansangines on 10/05/2016.
 */
public class PresentationEditGraph extends JFrame {
    private JButton editNodeButton;
    private JButton deleteNodeButton;
    private JButton addNodeButton;
    private JPanel buttons;
    private JList editList;
    private JList addList;
    private JList deleteList;
    private JPanel panel;

    public DomainPersistanceController persistanceController;

    public PresentationEditGraph(DomainPersistanceController persistanceController) {
        super("EDIT GRAPH");

        this.persistanceController = persistanceController;
        $$$setupUI$$$();
        setContentPane(panel);
        pack();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        editNodeButton.addActionListener(e -> editNodeAction("edit"));
        deleteNodeButton.addActionListener(e -> editNodeAction("delete"));
        addNodeButton.addActionListener(e -> editNodeAction("add"));
        setVisible(true);
    }

    private void editNodeAction(String action) {
        System.out.println("EditNodeAction");
        if (action.equals("edit")) {
            editList.setVisible(true);
            editList.addListSelectionListener(listListener);
        } else if (action.equals("delete")) {
            deleteList.setVisible(true);
            deleteList.addListSelectionListener(listListener);
        } else if (action.equals("add")) {
            addList.setVisible(true);
            addList.addListSelectionListener(listListener);
        }
    }

    ListSelectionListener listListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getSource() == editList) {
                String selected = editList.getSelectedValue().toString();
                //persistanceController.editNode(selected);
            } else if (e.getSource() == deleteList) {

            } else if (e.getSource() == addList) {

            }
        }
    };

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        final JLabel label1 = new JLabel();
        label1.setText("Edit Grap");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label1, gbc);
        buttons.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(buttons, gbc);
        editNodeButton = new JButton();
        editNodeButton.setText("Edit Node");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttons.add(editNodeButton, gbc);
        deleteNodeButton = new JButton();
        deleteNodeButton.setText("Delete Node");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttons.add(deleteNodeButton, gbc);
        addNodeButton = new JButton();
        addNodeButton.setText("Add Node");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttons.add(addNodeButton, gbc);
        editList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("Author");
        defaultListModel1.addElement("Paper");
        defaultListModel1.addElement("Term");
        defaultListModel1.addElement("Conference");
        editList.setModel(defaultListModel1);
        editList.setVisible(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        buttons.add(editList, gbc);
        addList = new JList();
        final DefaultListModel defaultListModel2 = new DefaultListModel();
        defaultListModel2.addElement("Author");
        defaultListModel2.addElement("Paper");
        defaultListModel2.addElement("Term");
        defaultListModel2.addElement("Conference");
        addList.setModel(defaultListModel2);
        addList.setVisible(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        buttons.add(addList, gbc);
        deleteList = new JList();
        deleteList.setInheritsPopupMenu(false);
        final DefaultListModel defaultListModel3 = new DefaultListModel();
        defaultListModel3.addElement("Author");
        defaultListModel3.addElement("Paper");
        defaultListModel3.addElement("Term");
        defaultListModel3.addElement("Conference");
        deleteList.setModel(defaultListModel3);
        deleteList.setVisible(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        buttons.add(deleteList, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
